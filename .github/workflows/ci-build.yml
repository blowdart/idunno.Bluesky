name: CI Build

on:
  workflow_dispatch:
  push:
    branches:
      - 'main'
    paths-ignore:
      - 'docs/**'
  pull_request:
    branches:
      - 'main'

permissions:
  contents: read

env:
  DOTNET_NOLOGO: true
  DOTNET_GENERATE_ASPNET_CERTIFICATE: false
  DOTNET_SKIP_FIRST_TIME_EXPERIENCE: true

jobs:
  build:
    runs-on: ubuntu-latest

    steps:
    - name: 'Checkout repository'
      uses: actions/checkout@v4
 
    - name: 'Setup .NET SDK'
      uses: actions/setup-dotnet@v4
      with:
        dotnet-version: 8.0.x
        dotnet-quality: 'ga'

    - name: 'Restore external dependencies'
      run: dotnet restore

    - name: 'Build repository'
      run: dotnet build --configuration Debug --no-restore

    - name: 'Test and produce code coverage data'
      run: dotnet test --no-build --no-restore --collect:"XPlat Code Coverage" --results-directory ./CoverageResults --logger "junit;LogFilePath=../../TestResults/tests.xml"

    - name: Create test summary
      uses: test-summary/action@v2.3
      with:
        paths: TestResults/**/tests.xml
        show: "fail, skip"
      if: always()

    - name: 'Add test summary to pull request'
      uses: marocchino/sticky-pull-request-comment@v2.9.0
      with:
        recreate: true
        path: test-summary.md
      if: github.event_name == 'pull_request'

    - name: 'Create code coverage summary'
      uses: irongut/CodeCoverageSummary@v1.3.0
      with:
        filename: 'CoverageResults/**/coverage.cobertura.xml'
        badge: true
        format: 'markdown'
        indicators: true
        output: 'both'
        thresholds: '50 75'
      if: always()

    - name: 'Add code coverage summary to pull request'
      uses: marocchino/sticky-pull-request-comment@v2.9.0
      with:
        recreate: true
        path: code-coverage-results.md
      if: github.event_name == 'pull_request'

    - name: 'Create code coverage report'
      uses: danielpalme/ReportGenerator-GitHub-Action@5.2.5
      with:
        reports: CoverageResults/*/coverage.cobertura.xml
        targetdir: CoverageResults/CoverageReport
        reporttypes: MarkdownSummaryGithub
        title: 'Code Coverage'
        license: '${{ secrets.REPORT_GENERATOR_LICENSE }}'
      if: always()

    - name: 'Append code coverage report to step summary'
      run: cat CoverageResults/CoverageReport/SummaryGithub.md >> $GITHUB_STEP_SUMMARY
      if: always()
